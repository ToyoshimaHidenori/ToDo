{"version":3,"sources":["components/Task.js","components/App.js","serviceWorker.js","index.js"],"names":["Task","props","className","isDone","onClick","done","width","height","xmlns","d","type","placeholder","onChange","change","value","name","rankChange","rank","taskMinitesChange","taskMinites","delete","viewBox","sortableHandle","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","App","tweetButton","donepo","todayTasks","id","endTime","Date","taskState","setTaskState","progressState","setProgressState","SortableItem","React","memo","SortableElement","event","taskMinitesChangedHandler","toggleDoneHandler","deleteTaskHandler","JSONindex","rankChangedHandler","nameChangedHandler","SortableContainer","sortableContainer","children","SortableComponent","onSortEnd","oldIndex","newIndex","arrayMove","lockAxis","pressDelay","map","index","todayTaskIndex","findIndex","t","todayTask","allTaskMin","doneTaskMin","forEach","array","Number","target","diff","taskIndex","todayTaskstmp","splice","calcProgress","marginTop","transitionDuration","animation","position","left","top","style","strokeWidth","styles","buildStyles","rotation","strokeLinecap","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","display","alignItems","fontSize","textAlign","color","textShadow","marginLeft","href","data-size","data-text","data-url","data-hashtags","data-show-count","max","push","Math","random","toString","substring","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b60df49.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Task.css\";\n\nconst Task = (props) => {\n  return (\n    <div className={\"Task\"}>\n      <div className={props.isDone ? \"Checked\" : \"Unchecked\"}>\n        <button className=\"CheckBox\" onClick={props.done}>\n          <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M21 6.285l-11.16 12.733-6.84-6.018 1.319-1.49 5.341 4.686 9.865-11.196 1.475 1.285z\" />\n          </svg>\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"New task\"\n          onChange={props.change}\n          value={props.name}\n        />\n        <select onChange={props.rankChange} value={props.rank}>\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n        </select>\n        <div className=\"InputNum\">\n          <input\n            type=\"number\"\n            onChange={props.taskMinitesChange}\n            value={props.taskMinites}\n          />\n          min\n        </div>\n        <button className=\"Trash\" onClick={props.delete}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path d=\"M21 6l-3 18h-12l-3-18h2.028l2.666 16h8.611l2.666-16h2.029zm-4.711-4c-.9 0-1.631-1.099-1.631-2h-5.316c0 .901-.73 2-1.631 2h-5.711v2h20v-2h-5.711z\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n","import React, { useState, Component } from \"react\";\nimport \"./App.css\";\nimport Task from \"./Task\";\nimport {\n  buildStyles,\n  CircularProgressbarWithChildren,\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport {\n  sortableContainer,\n  SortableElement,\n  sortableHandle,\n} from \"react-sortable-hoc\";\nimport arrayMove from \"array-move\";\n\nconst DragHandle = sortableHandle(() => <span>::</span>);\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nconst App = (props) => {\n  const [taskState, setTaskState] = useLocalStorage(\"taskState\", {\n    todayTasks: [\n      {\n        id: \"asdfas\",\n        name: \"アプリにアクセスする\",\n        isDone: true,\n        endTime: Date.parse(2020 / 10 / 21),\n        taskMinites: 10,\n        rank: \"A\",\n      },\n      {\n        id: \"afffdjkdk\",\n        name: \"Task を登録する\",\n        isDone: false,\n        endTime: Date(),\n        taskMinites: 20,\n        rank: \"A\",\n      },\n    ],\n  });\n\n  const [progressState, setProgressState] = useLocalStorage(\"progressState\", [\n    10,\n    30,\n  ]);\n\n  const SortableItem = React.memo(\n    SortableElement(({ value }) => (\n      <li>\n        <Task\n          key={value.id}\n          name={value.name}\n          isDone={value.isDone}\n          endTime={value.endTime}\n          rank={value.rank}\n          taskMinites={value.taskMinites}\n          taskMinitesChange={(event) =>\n            taskMinitesChangedHandler(event, value.id)\n          }\n          done={(event) => toggleDoneHandler(event, value.id)}\n          delete={() => deleteTaskHandler(value.JSONindex)}\n          rankChange={(event) => rankChangedHandler(event, value.id)}\n          change={(event) => nameChangedHandler(event, value.id)}\n        />\n      </li>\n    ))\n  );\n\n  const SortableContainer = React.memo(\n    sortableContainer(({ children }) => {\n      return <ul>{children}</ul>;\n    })\n  );\n\n  const SortableComponent = React.memo(() => {\n    const onSortEnd = ({ oldIndex, newIndex }) => {\n      setTaskState(({ todayTasks }) => ({\n        todayTasks: arrayMove(todayTasks, oldIndex, newIndex),\n      }));\n    };\n    return (\n      <SortableContainer onSortEnd={onSortEnd} lockAxis=\"y\" pressDelay=\"300\">\n        {taskState.todayTasks.map((value, index) => (\n          <SortableItem key={`item-${value.id}`} index={index} value={value} />\n        ))}\n      </SortableContainer>\n      // <SortableList items={taskState.todayTasks} onSortEnd={this.onSortEnd} />\n    );\n  });\n\n  const resetTaskHandler = () => {\n    setTaskState({\n      todayTasks: [\n        {\n          id: \"asdfas\",\n          name: \"Sample1\",\n          isDone: false,\n          endTime: Date.parse(2020 / 10 / 21),\n          taskMinites: 30,\n          rank: \"A\",\n        },\n        {\n          id: \"afffdjkdk\",\n          name: \"Sample2\",\n          isDone: false,\n          endTime: Date(),\n          taskMinites: 30,\n          rank: \"B\",\n        },\n      ],\n    });\n    setProgressState([0, 60]);\n  };\n\n  const addTaskHandler = () => {\n    const todayTasks = taskState.todayTasks;\n    todayTasks.push({\n      id: Math.random().toString(32).substring(2),\n      name: \"\",\n      isDone: false,\n      endTime: Date(),\n      taskMinites: 30,\n      rank: \"A\",\n    });\n    setTaskState({ todayTasks });\n    calcProgress();\n  };\n\n  const toggleDoneHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.isDone = todayTask.isDone ? false : true;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n\n    let allTaskMin = 0;\n    let doneTaskMin = 0;\n    taskState.todayTasks.forEach((todayTask, index, array) => {\n      allTaskMin += Number(todayTask.taskMinites);\n      if (todayTask.isDone) {\n        doneTaskMin += Number(todayTask.taskMinites);\n      }\n    });\n\n    if (todayTask.isDone) {\n      doneTaskMin += Number(todayTask.taskMinites);\n    } else {\n      doneTaskMin -= Number(todayTask.taskMinites);\n    }\n    setProgressState([doneTaskMin, allTaskMin]);\n  };\n\n  const nameChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.name = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const taskMinitesChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    const diff = Number(event.target.value) - Number(todayTask.taskMinites);\n    console.log(event.target.value);\n    console.log(todayTask.taskMinites);\n    todayTask.taskMinites = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n\n    let allTaskMin = 0;\n    let doneTaskMin = 0;\n    taskState.todayTasks.forEach((todayTask, index, array) => {\n      allTaskMin += Number(todayTask.taskMinites);\n      if (todayTask.isDone) {\n        doneTaskMin += Number(todayTask.taskMinites);\n      }\n    });\n\n    allTaskMin += Number(diff);\n    if (todayTask.isDone) {\n      doneTaskMin += Number(diff);\n    }\n    setProgressState([doneTaskMin, allTaskMin]);\n  };\n\n  const rankChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.rank = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const deleteTaskHandler = (taskIndex) => {\n    // const todayTasks = taskState.todayTasks.slice();\n    const todayTaskstmp = taskState.todayTasks;\n    todayTaskstmp.splice(taskIndex, 1);\n    calcProgress(setTaskState({ todayTasks: todayTaskstmp }));\n  };\n\n  const calcProgress = () => {\n    let allTaskMin = 0;\n    let doneTaskMin = 0;\n    taskState.todayTasks.forEach((todayTask, index, array) => {\n      allTaskMin += Number(todayTask.taskMinites);\n      if (todayTask.isDone) {\n        doneTaskMin += Number(todayTask.taskMinites);\n      }\n    });\n    setProgressState([doneTaskMin, allTaskMin]);\n  };\n\n  let tweetButton;\n  let donepo;\n  if (progressState[1] === progressState[0] && progressState[0] !== 0) {\n    tweetButton = {\n      marginTop: \"35px\",\n      transitionDuration: \"1s\",\n    };\n    donepo = {\n      animation: \"donepo 2s infinite\",\n    };\n  } else {\n    tweetButton = {\n      transitionDuration: \"1s\",\n      position: \"absolute\",\n      left: \"-100px\",\n      top: \"-100px\",\n    };\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Today's tasks</h1>\n      <div className=\"header\">\n        <div className=\"ProgressOuter\" style={donepo}>\n          <CircularProgressbarWithChildren\n            value={(100 * Number(progressState[0])) / Number(progressState[1])}\n            strokeWidth={15}\n            styles={buildStyles({\n              rotation: 0.5,\n              strokeLinecap: \"butt\",\n              pathTransitionDuration: 1,\n              pathColor: \"#507cda\",\n              textColor: \"#1c64ff\",\n              trailColor: \"#c6c6e6\",\n              backgroundColor: \"#3e98c7\",\n            })}\n          >\n            <div\n              className=\"ProgressInner\"\n              style={{ display: \"flex\", alignItems: \"flex-center\" }}\n            >\n              <div className=\"ProgressInnerInner\">\n                <div\n                  style={{\n                    fontSize: \"16vw\",\n                    textAlign: \"center\",\n                    color: \"#307cea\",\n                    textShadow: \"0px 0px 7px #1c64ff\",\n                  }}\n                >\n                  {progressState[0]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"5vw\",\n                    color: \"#9f9ea7\",\n                    display: \"flex\",\n                    marginLeft: \"40%\",\n                  }}\n                >\n                  /\n                  <div\n                    style={{\n                      fontSize: \"5vw\",\n                      color: \"#507cda\",\n                    }}\n                  >\n                    {progressState[1]}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CircularProgressbarWithChildren>\n        </div>\n        {/* <button onClick={resetTaskHandler}> reset </button>\n        <button onClick={calcProgress}> sync </button> */}\n      </div>\n      <div style={tweetButton}>\n        <a\n          id=\"tweetButton\"\n          href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\"\n          className=\"twitter-share-button\"\n          data-size=\"large\"\n          data-text={\n            \"Completed all today's tasks! Total:\" + progressState[0] + \"min\"\n          }\n          data-url=\"https://toyoshimahidenori.github.io/ToDo/gtd-todo/build/index.html\"\n          data-hashtags=\"todo\"\n          data-show-count=\"false\"\n        >\n          Tweet\n        </a>\n      </div>\n      <progress\n        id=\"progressbar\"\n        max={progressState[1]}\n        value={progressState[0]}\n      ></progress>\n      <SortableComponent />\n      {/* {taskState.todayTasks.map((todayTask, index) => {\n        if (!todayTask.isDone) {\n          return (\n            <Task\n              key={todayTask.id}\n              name={todayTask.name}\n              isDone={todayTask.isDone}\n              endTime={todayTask.endTime}\n              rank={todayTask.rank}\n              taskMinites={todayTask.taskMinites}\n              taskMinitesChange={(event) =>\n                taskMinitesChangedHandler(event, todayTask.id)\n              }\n              done={(event) => toggleDoneHandler(event, todayTask.id)}\n              delete={() => deleteTaskHandler(index)}\n              rankChange={(event) => rankChangedHandler(event, todayTask.id)}\n              change={(event) => nameChangedHandler(event, todayTask.id)}\n            />\n          );\n        }\n      })} */}\n      <div>\n        <button onClick={addTaskHandler}>Add task</button>\n      </div>\n      {/* {taskState.todayTasks.map((todayTask, index) => {\n        if (todayTask.isDone) {\n          return (\n            <Task\n              key={todayTask.id}\n              name={todayTask.name}\n              isDone={todayTask.isDone}\n              endTime={todayTask.endTime}\n              rank={todayTask.rank}\n              taskMinites={todayTask.taskMinites}\n              taskMinitesChange={(event) =>\n                taskMinitesChangedHandler(event, todayTask.id)\n              }\n              done={(event) => toggleDoneHandler(event, todayTask.id)}\n              delete={() => deleteTaskHandler(index)}\n              rankChange={(event) => rankChangedHandler(event, todayTask.id)}\n              change={(event) => nameChangedHandler(event, todayTask.id)}\n            />\n          );\n        }\n      })} */}\n      <small>©︎Toyoshima Hidenori 2020, v0.0.1</small>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}