{"version":3,"sources":["components/Task.js","components/App.js","serviceWorker.js","index.js"],"names":["Task","props","className","isDone","onClick","done","width","height","xmlns","d","type","placeholder","onChange","change","value","name","rankChange","rank","taskMinitesChange","taskMinites","delete","viewBox","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","App","todayTasks","id","endTime","Date","taskState","setTaskState","progressState","setProgressState","toggleDoneHandler","event","todayTaskIndex","findIndex","t","todayTask","calcProgress","setTimeout","nameChangedHandler","target","taskMinitesChangedHandler","rankChangedHandler","deleteTaskHandler","taskIndex","todayTaskstmp","splice","allTaskMin","doneTaskMin","forEach","index","array","Number","max","map","push","Math","random","toString","substring","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.379d9c38.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Task.css\";\n\nconst Task = (props) => {\n  return (\n    <div className={\"Task\"}>\n      <div className={props.isDone ? \"Checked\" : \"Unchecked\"}>\n        <button className=\"CheckBox\" onClick={props.done}>\n          <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M21 6.285l-11.16 12.733-6.84-6.018 1.319-1.49 5.341 4.686 9.865-11.196 1.475 1.285z\" />\n          </svg>\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"new task\"\n          onChange={props.change}\n          value={props.name}\n        />\n        <select onChange={props.rankChange} value={props.rank}>\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n        </select>\n        <div className=\"InputNum\">\n          <input\n            type=\"number\"\n            onChange={props.taskMinitesChange}\n            value={props.taskMinites}\n          />\n          min\n        </div>\n        <button className=\"Trash\" onClick={props.delete}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path d=\"M21 6l-3 18h-12l-3-18h2.028l2.666 16h8.611l2.666-16h2.029zm-4.711-4c-.9 0-1.631-1.099-1.631-2h-5.316c0 .901-.73 2-1.631 2h-5.711v2h20v-2h-5.711z\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Task from \"./Task\";\n\n// Hook\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nconst App = (props) => {\n  //   const [taskState, setTaskState] = useState({\n  //     todayTasks: [\n  //       {\n  //         id: \"asdfas\",\n  //         name: \"Sample1\",\n  //         isDone: false,\n  //         endTime: Date.parse(2020 / 10 / 21),\n  //         taskMinites: 30,\n  //         rank: \"A\",\n  //       },\n  //       {\n  //         id: \"afffdjkdk\",\n  //         name: \"Sample2\",\n  //         isDone: false,\n  //         endTime: Date(),\n  //         taskMinites: 30,\n  //         rank: \"B\",\n  //       },\n  //     ],\n  //   });\n\n  //   const [progressState, setProgressState] = useState([0, 60]);\n  const [taskState, setTaskState] = useLocalStorage(\"taskState\", {\n    todayTasks: [\n      {\n        id: \"asdfas\",\n        name: \"Sample1\",\n        isDone: false,\n        endTime: Date.parse(2020 / 10 / 21),\n        taskMinites: 30,\n        rank: \"A\",\n      },\n      {\n        id: \"afffdjkdk\",\n        name: \"Sample2\",\n        isDone: false,\n        endTime: Date(),\n        taskMinites: 30,\n        rank: \"B\",\n      },\n    ],\n  });\n\n  const [progressState, setProgressState] = useLocalStorage(\"progressState\", [\n    0,\n    60,\n  ]);\n\n  const resetTaskHandler = () => {\n    setTaskState({\n      todayTasks: [\n        {\n          id: \"asdfas\",\n          name: \"Sample1\",\n          isDone: false,\n          endTime: Date.parse(2020 / 10 / 21),\n          taskMinites: 30,\n          rank: \"A\",\n        },\n        {\n          id: \"afffdjkdk\",\n          name: \"Sample2\",\n          isDone: false,\n          endTime: Date(),\n          taskMinites: 30,\n          rank: \"B\",\n        },\n      ],\n    });\n    setProgressState([0, 60]);\n  };\n  const addTaskHandler = () => {\n    const todayTasks = taskState.todayTasks;\n    todayTasks.push({\n      id: Math.random().toString(32).substring(2),\n      name: \"\",\n      isDone: false,\n      endTime: Date(),\n      taskMinites: 30,\n      rank: \"B\",\n    });\n    setTaskState({ todayTasks });\n    calcProgress();\n  };\n\n  const toggleDoneHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.isDone = todayTask.isDone ? false : true;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n    calcProgress(setTimeout(1000));\n  };\n\n  const nameChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.name = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const taskMinitesChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.taskMinites = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n    calcProgress();\n  };\n\n  const rankChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.rank = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const deleteTaskHandler = (taskIndex) => {\n    // const todayTasks = taskState.todayTasks.slice();\n    const todayTaskstmp = taskState.todayTasks;\n    todayTaskstmp.splice(taskIndex, 1);\n    calcProgress(setTaskState({ todayTasks: todayTaskstmp }));\n  };\n\n  const calcProgress = () => {\n    let allTaskMin = 0;\n    let doneTaskMin = 0;\n    taskState.todayTasks.forEach((todayTask, index, array) => {\n      allTaskMin += Number(todayTask.taskMinites);\n      if (todayTask.isDone) {\n        doneTaskMin += Number(todayTask.taskMinites);\n      }\n    });\n    setProgressState([doneTaskMin, allTaskMin]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>This is GTD todo</h1>\n      <button onClick={resetTaskHandler}> reset </button>\n      <button onClick={calcProgress}> sync </button>\n      <p>\n        Total:{progressState[1]}min Done:{progressState[0]}min Undone:\n        {progressState[1] - progressState[0]}\n      </p>\n      <progress\n        id=\"progressbar\"\n        max={progressState[1]}\n        value={progressState[0]}\n      ></progress>\n      {taskState.todayTasks.map((todayTask, index) => {\n        if (!todayTask.isDone) {\n          return (\n            <Task\n              key={todayTask.id}\n              name={todayTask.name}\n              isDone={todayTask.isDone}\n              endTime={todayTask.endTime}\n              rank={todayTask.rank}\n              taskMinites={todayTask.taskMinites}\n              taskMinitesChange={(event) =>\n                taskMinitesChangedHandler(event, todayTask.id)\n              }\n              done={(event) => toggleDoneHandler(event, todayTask.id)}\n              delete={() => deleteTaskHandler(index)}\n              rankChange={(event) => rankChangedHandler(event, todayTask.id)}\n              change={(event) => nameChangedHandler(event, todayTask.id)}\n            />\n          );\n        }\n      })}\n      <div>\n        <button onClick={addTaskHandler}>addTask</button>\n      </div>\n      {taskState.todayTasks.map((todayTask, index) => {\n        if (todayTask.isDone) {\n          return (\n            <Task\n              key={todayTask.id}\n              name={todayTask.name}\n              isDone={todayTask.isDone}\n              endTime={todayTask.endTime}\n              rank={todayTask.rank}\n              taskMinites={todayTask.taskMinites}\n              taskMinitesChange={(event) =>\n                taskMinitesChangedHandler(event, todayTask.id)\n              }\n              done={(event) => toggleDoneHandler(event, todayTask.id)}\n              delete={() => deleteTaskHandler(index)}\n              rankChange={(event) => rankChangedHandler(event, todayTask.id)}\n              change={(event) => nameChangedHandler(event, todayTask.id)}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}