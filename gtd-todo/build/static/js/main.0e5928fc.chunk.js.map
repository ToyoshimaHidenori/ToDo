{"version":3,"sources":["components/Task.js","components/App.js","serviceWorker.js","index.js"],"names":["Task","props","className","isDone","style","color","boxShadow","onClick","done","width","height","xmlns","d","type","onChange","change","value","name","rankChange","rank","taskMinitesChange","taskMinites","delete","App","useState","todayTasks","id","endTime","Date","parse","taskState","setTaskState","map","todayTask","index","key","event","todayTaskIndex","findIndex","t","target","taskMinitesChangedHandler","toggleDoneHandler","taskIndex","todayTaskstmp","splice","deleteTaskHandler","rankChangedHandler","nameChangedHandler","push","Math","random","toString","substring","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAkDeA,G,YAzCF,SAACC,GACZ,OACE,yBAAKC,UAAW,QACbD,EAAME,OACL,4BACED,UAAU,gBACVE,MAAO,CACLC,MAAO,UACPC,UACE,4GAEJC,QAASN,EAAMO,MAEf,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,MAAM,8BAChC,0BAAMC,EAAE,0FAIZ,4BAAQV,UAAU,kBAAkBK,QAASN,EAAMO,MACjD,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,MAAM,8BAChC,0BAAMC,EAAE,0FAId,2BAAOC,KAAK,OAAOC,SAAUb,EAAMc,OAAQC,MAAOf,EAAMgB,OACxD,4BAAQH,SAAUb,EAAMiB,WAAYF,MAAOf,EAAMkB,MAC/C,4BAAQH,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEF,2BACEH,KAAK,SACLC,SAAUb,EAAMmB,kBAChBJ,MAAOf,EAAMoB,cA/BjB,MAkCE,4BAAQd,QAASN,EAAMqB,QAAvB,aC0GSC,EAnJH,SAACtB,GAAW,IAAD,EACauB,mBAAS,CACzCC,WAAY,CACV,CACEC,GAAI,SACJT,KAAM,UACNd,QAAQ,EACRwB,QAASC,KAAKC,MAAM,IAAY,IAChCR,YAAa,GACbF,KAAM,KAER,CACEO,GAAI,YACJT,KAAM,UACNd,QAAQ,EACRwB,QAASC,OACTP,YAAa,GACbF,KAAM,QAjBS,mBACdW,EADc,KACHC,EADG,KAoHrB,OACE,yBAAK7B,UAAU,OACb,gDACA,4BAAQK,QAjGa,WACvBwB,EAAa,CACXN,WAAY,CACV,CACEC,GAAI,SACJT,KAAM,UACNd,QAAQ,EACRwB,QAASC,KAAKC,MAAM,IAAY,IAChCR,YAAa,GACbF,KAAM,KAER,CACEO,GAAI,YACJT,KAAM,UACNd,QAAQ,EACRwB,QAASC,OACTP,YAAa,GACbF,KAAM,UAgFV,WACCW,EAAUL,WAAWO,KAAI,SAACC,EAAWC,GACpC,OACE,kBAAC,EAAD,CACEC,IAAKF,EAAUP,GACfT,KAAMgB,EAAUhB,KAChBd,OAAQ8B,EAAU9B,OAClBwB,QAASM,EAAUN,QACnBR,KAAMc,EAAUd,KAChBE,YAAaY,EAAUZ,YACvBD,kBAAmB,SAACgB,GAAD,OA9CK,SAACA,EAAOV,GACxC,IAAMW,EAAiBP,EAAUL,WAAWa,WAAU,SAACC,GACrD,OAAOA,EAAEb,KAAOA,KAEZO,EAAS,eACVH,EAAUL,WAAWY,IAE1BJ,EAAUZ,YAAce,EAAMI,OAAOxB,MACrC,IAAMS,EAAU,YAAOK,EAAUL,YACjCA,EAAWY,GAAkBJ,EAC7BF,EAAa,CAAEN,WAAYA,IAqCjBgB,CAA0BL,EAAOH,EAAUP,KAE7ClB,KAAM,SAAC4B,GAAD,OA3EU,SAACA,EAAOV,GAChC,IAAMW,EAAiBP,EAAUL,WAAWa,WAAU,SAACC,GACrD,OAAOA,EAAEb,KAAOA,KAEZO,EAAS,eACVH,EAAUL,WAAWY,IAE1BJ,EAAU9B,QAAS8B,EAAU9B,OAC7B,IAAMsB,EAAU,YAAOK,EAAUL,YACjCA,EAAWY,GAAkBJ,EAC7BF,EAAa,CAAEN,WAAYA,IAiEFiB,CAAkBN,EAAOH,EAAUP,KACpDJ,OAAQ,kBAxBQ,SAACqB,GAEzB,IAAMC,EAAgBd,EAAUL,WAChCmB,EAAcC,OAAOF,EAAW,GAChCZ,EAAa,CAAEN,WAAYmB,IAoBLE,CAAkBZ,IAChChB,WAAY,SAACkB,GAAD,OAtCK,SAACA,EAAOV,GACjC,IAAMW,EAAiBP,EAAUL,WAAWa,WAAU,SAACC,GACrD,OAAOA,EAAEb,KAAOA,KAEZO,EAAS,eACVH,EAAUL,WAAWY,IAE1BJ,EAAUd,KAAOiB,EAAMI,OAAOxB,MAC9B,IAAMS,EAAU,YAAOK,EAAUL,YACjCA,EAAWY,GAAkBJ,EAC7BF,EAAa,CAAEN,WAAYA,IA4BIsB,CAAmBX,EAAOH,EAAUP,KAC3DX,OAAQ,SAACqB,GAAD,OAjES,SAACA,EAAOV,GACjC,IAAMW,EAAiBP,EAAUL,WAAWa,WAAU,SAACC,GACrD,OAAOA,EAAEb,KAAOA,KAEZO,EAAS,eACVH,EAAUL,WAAWY,IAE1BJ,EAAUhB,KAAOmB,EAAMI,OAAOxB,MAC9B,IAAMS,EAAU,YAAOK,EAAUL,YACjCA,EAAWY,GAAkBJ,EAC7BF,EAAa,CAAEN,WAAYA,IAuDAuB,CAAmBZ,EAAOH,EAAUP,UAK7D,6BACE,4BAAQnB,QAjGS,WACrB,IAAMkB,EAAaK,EAAUL,WAC7BA,EAAWwB,KAAK,CACdvB,GAAIwB,KAAKC,SAASC,SAAS,IAAIC,UAAU,GACzCpC,KAAM,WACNd,QAAQ,EACRwB,QAASC,OACTP,YAAa,GACbF,KAAM,MAERY,EAAa,CAAEN,iBAuFX,cCrIY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e5928fc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Task.css\";\n\nconst checkedStyle = {\n  background: \"#3272fc\",\n  \"box-shadow\": \"inset 7px 7px 14px #214aa4 inset -7px -7px 14px #449aff\",\n  color: \"#dddddd\",\n};\n\nconst Task = (props) => {\n  return (\n    <div className={\"Task\"}>\n      {props.isDone ? (\n        <button\n          className=\"checkedButton\"\n          style={{\n            color: \"#3272fc\",\n            boxShadow:\n              \"15px 15px 30px #bab9c2, -15px -15px 30px #ffffff, inset 2px 2px 5px #bab9c2, inset -2px -2px 5px #ffffff\",\n          }}\n          onClick={props.done}\n        >\n          <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M21 6.285l-11.16 12.733-6.84-6.018 1.319-1.49 5.341 4.686 9.865-11.196 1.475 1.285z\" />\n          </svg>\n        </button>\n      ) : (\n        <button className=\"UncheckedButton\" onClick={props.done}>\n          <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M21 6.285l-11.16 12.733-6.84-6.018 1.319-1.49 5.341 4.686 9.865-11.196 1.475 1.285z\" />\n          </svg>\n        </button>\n      )}\n      <input type=\"text\" onChange={props.change} value={props.name} />\n      <select onChange={props.rankChange} value={props.rank}>\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n      </select>\n      <input\n        type=\"number\"\n        onChange={props.taskMinitesChange}\n        value={props.taskMinites}\n      />\n      min\n      <button onClick={props.delete}>remove</button>\n    </div>\n  );\n};\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Task from \"./Task\";\n\nconst App = (props) => {\n  const [taskState, setTaskState] = useState({\n    todayTasks: [\n      {\n        id: \"asdfas\",\n        name: \"Sample1\",\n        isDone: false,\n        endTime: Date.parse(2020 / 10 / 21),\n        taskMinites: 30,\n        rank: \"A\",\n      },\n      {\n        id: \"afffdjkdk\",\n        name: \"Sample2\",\n        isDone: false,\n        endTime: Date(),\n        taskMinites: 30,\n        rank: \"B\",\n      },\n    ],\n  });\n\n  const resetTaskHandler = () => {\n    setTaskState({\n      todayTasks: [\n        {\n          id: \"asdfas\",\n          name: \"Sample1\",\n          isDone: false,\n          endTime: Date.parse(2020 / 10 / 21),\n          taskMinites: 30,\n          rank: \"A\",\n        },\n        {\n          id: \"afffdjkdk\",\n          name: \"Sample2\",\n          isDone: false,\n          endTime: Date(),\n          taskMinites: 30,\n          rank: \"B\",\n        },\n      ],\n    });\n  };\n  const addTaskHandler = () => {\n    const todayTasks = taskState.todayTasks;\n    todayTasks.push({\n      id: Math.random().toString(32).substring(2),\n      name: \"new task\",\n      isDone: false,\n      endTime: Date(),\n      taskMinites: 30,\n      rank: \"B\",\n    });\n    setTaskState({ todayTasks });\n  };\n\n  const toggleDoneHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.isDone = todayTask.isDone ? false : true;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const nameChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.name = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const taskMinitesChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.taskMinites = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const rankChangedHandler = (event, id) => {\n    const todayTaskIndex = taskState.todayTasks.findIndex((t) => {\n      return t.id === id;\n    });\n    const todayTask = {\n      ...taskState.todayTasks[todayTaskIndex],\n    };\n    todayTask.rank = event.target.value;\n    const todayTasks = [...taskState.todayTasks];\n    todayTasks[todayTaskIndex] = todayTask;\n    setTaskState({ todayTasks: todayTasks });\n  };\n\n  const deleteTaskHandler = (taskIndex) => {\n    // const todayTasks = taskState.todayTasks.slice();\n    const todayTaskstmp = taskState.todayTasks;\n    todayTaskstmp.splice(taskIndex, 1);\n    setTaskState({ todayTasks: todayTaskstmp });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>This is GTD todo</h1>\n      <button onClick={resetTaskHandler}> reset </button>\n      {taskState.todayTasks.map((todayTask, index) => {\n        return (\n          <Task\n            key={todayTask.id}\n            name={todayTask.name}\n            isDone={todayTask.isDone}\n            endTime={todayTask.endTime}\n            rank={todayTask.rank}\n            taskMinites={todayTask.taskMinites}\n            taskMinitesChange={(event) =>\n              taskMinitesChangedHandler(event, todayTask.id)\n            }\n            done={(event) => toggleDoneHandler(event, todayTask.id)}\n            delete={() => deleteTaskHandler(index)}\n            rankChange={(event) => rankChangedHandler(event, todayTask.id)}\n            change={(event) => nameChangedHandler(event, todayTask.id)}\n          />\n        );\n      })}\n\n      <div>\n        <button onClick={addTaskHandler}>addTask</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}